Начать хочется с того чтобы вообще определиться зачем нужны тесты и когда они не нужны.

1. Слайд
- Более стабильный продакшен потому что тесты ловят баг
- Ловят они его мгновенно - не нужно отдавать другому человеку на тестирование 
- Локализуют ошибку - сразу понятно в каком файле/файлах была ошибка
- Тесты это документация - и новым разаботчикам проще вкатится в проэкт

когда же тесты не нужны

- маленькие проэкты потому что маленький проэкт можно протестировать мануально, 
а чем больше и сложней проэкт тем больше вероятность что изменяя какой то модуль мы сломаем 
систему в том месте о котором даже не знаем
- пробный проэкты в которых часто меняются требования и требования нигде не прописанны и т.д.
- ну и а-б тестирования

понятно что все разарабочики хотят помогать бизнесу =)

но для чего же тесты нужны именно для разработчика

- ускорение обратной связи сразу понятно что я что то сломал
- упрощение рефакторинга - потому что если у вас файл он же модуль который покрыт тестом - и
вы сделали рефакторинг - и тест также зеленый все хорошо - а если тест красный нужно 
разбираться
- тесты это документация - которую веселей писать потому что все таки вы код пишите а 
читается также понятно впринципе как и текст
- тесты делают ваш код болеее тестируемым 
потому что когда вы пишите сам код - вы подсознательно думаете о том как же его 
протестировать.
само написание тестов помогает разаработчикам разобраться зачем нужна абстракция что такое 
интерфейс и так далее

какие виды тестов существуют? 
юнит тесты - это тесты тестирующие один файл
интеграционные тесты - это тесты тестирующие несколько модулей без сильных сайд эффектов
проверяющие правильно ли мы собрали эти модули в единое целое.
end-to-end это тесты всей системы

кроме этого существуют еще нагрузочное смоук тестирование - но это не те тесты которые пишут
именно разработчки.

Почему пирамида тестирования именно пирамида - потому что для максимальной надеждности 
системы нам нужно покрыть каждый файл юнит тестом потом написать среднее колличество 
интеграционных и малое колличество енд ту енд

есть и другие подходы но о них позже

Приняты два параметрка честность и антихрупкость тестов:
честный тест это когда тест зеленый  модуль тоже зеленый - елси модуль все таки красный 
дописываем еще один тест
и если тест красный - значит все таки проблема в нашем модуле а не в замоканых данных

анти хрупкость говорит о том что мы должны тестировать не внутреннюю реализацию метода а 
точки выхода и интерфейс модуля и точки выхода из него сторонних модулей.

тоесть если у нас есть какой внутренний метод компоненты - онКлик например который в каких 
то случаях вызывает диспатч - который является сайд эффектом - мы не должны заботится о том 
что будет вызыван онКлик - потому что сегодня это онКлик - завтра пришёл другой разработчик 
и сделал его ХендлКлик и добавил в него логики - но метод по прежнему вызывает диспатч - нам 
нужно тестировать что метод вызывает диспатч

три фазы теста 
первая это подготовка данных замокать все если нужно отрендерить компоненту или создать 
экземпляр тетсируемого класса в js-dom и так далее

вторая фааза это действие - вызов соответствующей функции, какое то событие в доме или что 
то еще..

и третья фаза это сравнение первого и второго

Первое что хочу сказать что тут чисто психологически - вначале особенно когда ты не 
понимаешь как мокнуть данные и только разбираешься с джестом - то процентов 80% времени у 
тебя будет уходить на то чтобы замокать и только 20% на тесты. 

Акт должен быть один в тесте - ну тоесть допустим у нас есть компонента с чекбоксом - и мы 
пишем один 

отрендерели компоненту
проверили что чекбокс чекед - фолс
задиспатчили юзер.клик на чекбокс
проверили что после этого чекет тру 
потом еще раз задиспатчили клик
проверили что чекет фолс

это вообщем то не очень хорошо - и если у вас чекбокс - это еще нормально потому что это легко читается и человека понятно

но если у вас более сложная логика рекомендуется разбивать это на два разных теста и первый клик выносить в стадию подготовки

Почему же джест?

у нас есть много разных библиотек для тестирования - моча чай карма джасмин синопс. и какие то предоставляют
только среду для подготовки и мокания данных какие то только ассерты какие то CLI
это все нужно собирать несколько конфигов 
а в джесте все готово - и все есть - причем можно прикручивать другие библиотеки.














